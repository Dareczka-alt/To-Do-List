{"ast":null,"code":"import { createStore } from 'redux';\nimport initialState from './initialState';\nimport strContains from '../utils/strContains.js';\nimport shortid from 'shortid';\n\n//selectors\nexport const getFilteredCards = (_ref, columnId) => {\n  let {\n    cards,\n    searchString\n  } = _ref;\n  return cards.filter(card => card.columnId === columnId && strContains(card.title, searchString));\n};\nexport const getAllColumns = state => state.columns;\nexport const getListById = (_ref2, listId) => {\n  let {\n    lists\n  } = _ref2;\n  return lists.find(list => list.id === listId);\n};\nexport const getColumnsByList = (_ref3, listId) => {\n  let {\n    columns\n  } = _ref3;\n  return columns.filter(column => column.listId === listId);\n};\nexport const getAllLists = state => state.lists;\nexport const getCardById = (_ref4, cardId) => {\n  let {\n    cards\n  } = _ref4;\n  return cards.filter(card => card.id == cardId)[0];\n};\nexport const getFavouriteCard = state => state.cards.filter(card => card.isFavourite === true);\n\n// action creators\nexport const addColumn = payload => ({\n  type: 'ADD_COLUMN',\n  payload\n});\nexport const addCard = payload => ({\n  type: 'ADD_CARD',\n  payload\n});\nexport const addList = payload => ({\n  type: 'ADD_LIST',\n  payload\n});\nexport const updateSearchString = payload => ({\n  type: 'UPDATE_SEARCHSTRING',\n  payload\n});\nexport const toggleClass = payload => ({\n  type: 'TOGGLE_CARD_FAVOURITE',\n  payload\n});\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_COLUMN':\n      return {\n        ...state,\n        columns: [...state.columns, {\n          ...action.payload,\n          key: shortid()\n        }]\n      };\n    case 'ADD_CARD':\n      return {\n        ...state,\n        cards: [...state.cards, {\n          ...action.payload,\n          key: shortid()\n        }]\n      };\n    case 'UPDATE_SEARCHSTRING':\n      return {\n        ...state,\n        searchString: action.payload\n      };\n    case 'ADD_LIST':\n      return {\n        ...state,\n        lists: [...state.lists, {\n          ...action.payload,\n          key: shortid(),\n          id: shortid()\n        }]\n      };\n    case 'TOGGLE_CARD_FAVOURITE':\n      return {\n        ...state,\n        cards: state.cards.map(card => card.id === action.payload ? {\n          ...card,\n          isFavourite: !card.isFavourite\n        } : card)\n      };\n    default:\n      return state;\n  }\n};\nconst store = createStore(reducer, initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nexport default store;","map":{"version":3,"names":["createStore","initialState","strContains","shortid","getFilteredCards","_ref","columnId","cards","searchString","filter","card","title","getAllColumns","state","columns","getListById","_ref2","listId","lists","find","list","id","getColumnsByList","_ref3","column","getAllLists","getCardById","_ref4","cardId","getFavouriteCard","isFavourite","addColumn","payload","type","addCard","addList","updateSearchString","toggleClass","reducer","action","key","map","store","window","__REDUX_DEVTOOLS_EXTENSION__"],"sources":["C:/Users/asasa/OneDrive/Pulpit/projektreact/src/redux/store.js"],"sourcesContent":["import { createStore } from 'redux';\r\nimport initialState from './initialState';\r\nimport strContains from '../utils/strContains.js';\r\nimport shortid from 'shortid';\r\n\r\n//selectors\r\nexport const getFilteredCards = ({ cards, searchString }, columnId) => cards\r\n  .filter(card => card.columnId === columnId && strContains(card.title, searchString));\r\nexport const getAllColumns = (state) => state.columns;\r\nexport const getListById = ({ lists }, listId) => lists.find(list => list.id === listId)\r\nexport const getColumnsByList = ({ columns }, listId) => columns.filter(column => column.listId === listId)\r\nexport const getAllLists = (state) => state.lists;\r\nexport const getCardById = ({ cards }, cardId) => cards.filter(card => card.id == cardId)[0];\r\nexport const getFavouriteCard = (state) =>\r\n  state.cards.filter((card) => card.isFavourite === true);\r\n\r\n\r\n// action creators\r\nexport const addColumn = payload => ({ type: 'ADD_COLUMN', payload });\r\nexport const addCard = payload => ({ type: 'ADD_CARD', payload });\r\nexport const addList = payload => ({ type: 'ADD_LIST', payload });\r\nexport const updateSearchString = payload => ({ type: 'UPDATE_SEARCHSTRING', payload });\r\nexport const toggleClass = payload => ({ type: 'TOGGLE_CARD_FAVOURITE', payload });\r\n\r\n\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_COLUMN':\r\n      return { ...state, columns: [...state.columns, { ...action.payload, key: shortid() }] };\r\n    case 'ADD_CARD':\r\n      return { ...state, cards: [...state.cards, { ...action.payload, key: shortid() }] };\r\n    case 'UPDATE_SEARCHSTRING':\r\n      return { ...state, searchString: action.payload };\r\n    case 'ADD_LIST':\r\n      return { ...state, lists: [...state.lists, { ...action.payload, key: shortid(), id: shortid() }] };\r\n    case 'TOGGLE_CARD_FAVOURITE':\r\n      return { ...state, cards: state.cards.map(card => (card.id === action.payload) ? { ...card, isFavourite: !card.isFavourite } : card) };\r\n    default:\r\n      return state;\r\n\r\n  }\r\n};\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n\r\n);\r\n\r\nexport default store;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}