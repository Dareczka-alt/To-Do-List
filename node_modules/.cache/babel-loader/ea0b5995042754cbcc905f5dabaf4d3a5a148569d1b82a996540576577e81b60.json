{"ast":null,"code":"import shortid from 'shortid';\nimport strContains from '../utils/strContains.js';\n\n//selectros\nexport const getFilteredCards = (_ref, columnId) => {\n  let {\n    cards,\n    searchString\n  } = _ref;\n  return cards.filter(card => card.columnId === columnId && strContains(card.title, searchString));\n};\nexport const getCardById = (_ref2, cardId) => {\n  let {\n    cards\n  } = _ref2;\n  return cards.filter(card => card.id === cardId)[0];\n};\nexport const getFavouriteCard = state => state.cards.filter(card => card.isFavourite === true);\n\n//action creators\nexport const addCard = payload => ({\n  type: ADD_CARD,\n  payload\n});\nexport const toggleClass = payload => ({\n  type: TOGGLE_CARD_FAVOURITE,\n  payload\n});\nexport const removeCard = payload => ({\n  type: REMOVE_CARD,\n  payload\n});\nconst createActionName = actionName => `app/lists/${actionName}`;\nconst ADD_CARD = createActionName('ADD_CARD');\nconst TOGGLE_CARD_FAVOURITE = createActionName('TOGGLE_CARD_FAVOURITE');\nconst REMOVE_CARD = createActionName('REMOVE_CARD');\nconst cardsReducer = function () {\n  let statePart = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case ADD_CARD:\n      return [...statePart, {\n        ...action.payload,\n        id: shortid()\n      }];\n    case TOGGLE_CARD_FAVOURITE:\n      return statePart.map(card => card.id === action.payload ? {\n        ...card,\n        isFavourite: !card.isFavourite\n      } : card);\n    case REMOVE_CARD:\n      return statePart.map(card => statePart.cards.filter(card => card.id !== action.payload));\n    default:\n      return statePart;\n  }\n};\nexport default cardsReducer;","map":{"version":3,"names":["shortid","strContains","getFilteredCards","_ref","columnId","cards","searchString","filter","card","title","getCardById","_ref2","cardId","id","getFavouriteCard","state","isFavourite","addCard","payload","type","ADD_CARD","toggleClass","TOGGLE_CARD_FAVOURITE","removeCard","REMOVE_CARD","createActionName","actionName","cardsReducer","statePart","arguments","length","undefined","action","map"],"sources":["C:/Users/asasa/OneDrive/Pulpit/projektreact/src/redux/cardsRedux.js"],"sourcesContent":["import shortid from 'shortid';\r\nimport strContains from '../utils/strContains.js';\r\n\r\n//selectros\r\nexport const getFilteredCards = ({ cards, searchString }, columnId) => cards\r\n  .filter(card => card.columnId === columnId && strContains(card.title, searchString));\r\nexport const getCardById = ({ cards }, cardId) => cards.filter(card => card.id === cardId)[0];\r\nexport const getFavouriteCard = (state) =>\r\n  state.cards.filter((card) => card.isFavourite === true);\r\n\r\n//action creators\r\nexport const addCard = payload => ({ type: ADD_CARD, payload });\r\nexport const toggleClass = payload => ({ type: TOGGLE_CARD_FAVOURITE, payload });\r\nexport const removeCard = payload => ({ type: REMOVE_CARD, payload });\r\nconst createActionName = actionName => `app/lists/${actionName}`;\r\nconst ADD_CARD = createActionName('ADD_CARD');\r\nconst TOGGLE_CARD_FAVOURITE = createActionName('TOGGLE_CARD_FAVOURITE');\r\nconst REMOVE_CARD = createActionName('REMOVE_CARD');\r\n\r\n\r\nconst cardsReducer = (statePart = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CARD:\r\n      return [...statePart, { ...action.payload, id: shortid() }];\r\n    case TOGGLE_CARD_FAVOURITE:\r\n      return statePart.map(card => (card.id === action.payload) ? { ...card, isFavourite: !card.isFavourite } : card);\r\n    case REMOVE_CARD:\r\n      return statePart.map(card => statePart.cards.filter((card) => card.id !== action.payload))\r\n    default:\r\n      return statePart;\r\n  }\r\n}\r\n\r\nexport default cardsReducer;"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAAC,IAAA,EAA0BC,QAAQ;EAAA,IAAjC;IAAEC,KAAK;IAAEC;EAAa,CAAC,GAAAH,IAAA;EAAA,OAAeE,KAAK,CACzEE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACJ,QAAQ,KAAKA,QAAQ,IAAIH,WAAW,CAACO,IAAI,CAACC,KAAK,EAAEH,YAAY,CAAC,CAAC;AAAA;AACtF,OAAO,MAAMI,WAAW,GAAGA,CAAAC,KAAA,EAAYC,MAAM;EAAA,IAAjB;IAAEP;EAAM,CAAC,GAAAM,KAAA;EAAA,OAAaN,KAAK,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAKD,MAAM,CAAC,CAAC,CAAC,CAAC;AAAA;AAC7F,OAAO,MAAME,gBAAgB,GAAIC,KAAK,IACpCA,KAAK,CAACV,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACQ,WAAW,KAAK,IAAI,CAAC;;AAEzD;AACA,OAAO,MAAMC,OAAO,GAAGC,OAAO,KAAK;EAAEC,IAAI,EAAEC,QAAQ;EAAEF;AAAQ,CAAC,CAAC;AAC/D,OAAO,MAAMG,WAAW,GAAGH,OAAO,KAAK;EAAEC,IAAI,EAAEG,qBAAqB;EAAEJ;AAAQ,CAAC,CAAC;AAChF,OAAO,MAAMK,UAAU,GAAGL,OAAO,KAAK;EAAEC,IAAI,EAAEK,WAAW;EAAEN;AAAQ,CAAC,CAAC;AACrE,MAAMO,gBAAgB,GAAGC,UAAU,IAAK,aAAYA,UAAW,EAAC;AAChE,MAAMN,QAAQ,GAAGK,gBAAgB,CAAC,UAAU,CAAC;AAC7C,MAAMH,qBAAqB,GAAGG,gBAAgB,CAAC,uBAAuB,CAAC;AACvE,MAAMD,WAAW,GAAGC,gBAAgB,CAAC,aAAa,CAAC;AAGnD,MAAME,YAAY,GAAG,SAAAA,CAAA,EAA4B;EAAA,IAA3BC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAC1C,QAAQC,MAAM,CAACb,IAAI;IACjB,KAAKC,QAAQ;MACX,OAAO,CAAC,GAAGQ,SAAS,EAAE;QAAE,GAAGI,MAAM,CAACd,OAAO;QAAEL,EAAE,EAAEb,OAAO,CAAC;MAAE,CAAC,CAAC;IAC7D,KAAKsB,qBAAqB;MACxB,OAAOM,SAAS,CAACK,GAAG,CAACzB,IAAI,IAAKA,IAAI,CAACK,EAAE,KAAKmB,MAAM,CAACd,OAAO,GAAI;QAAE,GAAGV,IAAI;QAAEQ,WAAW,EAAE,CAACR,IAAI,CAACQ;MAAY,CAAC,GAAGR,IAAI,CAAC;IACjH,KAAKgB,WAAW;MACd,OAAOI,SAAS,CAACK,GAAG,CAACzB,IAAI,IAAIoB,SAAS,CAACvB,KAAK,CAACE,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACK,EAAE,KAAKmB,MAAM,CAACd,OAAO,CAAC,CAAC;IAC5F;MACE,OAAOU,SAAS;EACpB;AACF,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}